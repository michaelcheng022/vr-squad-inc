// Code generated by Prisma (prisma@1.33.0). DO NOT EDIT.
// Please don't change this file manually but run `prisma generate` to update it.
// For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

import { DocumentNode } from "graphql";
import {
  makePrismaClientClass,
  BaseClientOptions,
  Model
} from "prisma-client-lib";
import { typeDefs } from "./prisma-schema";

export type AtLeastOne<T, U = { [K in keyof T]: Pick<T, K> }> = Partial<T> &
  U[keyof U];

export type Maybe<T> = T | undefined | null;

export interface Exists {
  listing: (where?: ListingWhereInput) => Promise<boolean>;
  template: (where?: TemplateWhereInput) => Promise<boolean>;
  user: (where?: UserWhereInput) => Promise<boolean>;
}

export interface Node {}

export type FragmentableArray<T> = Promise<Array<T>> & Fragmentable;

export interface Fragmentable {
  $fragment<T>(fragment: string | DocumentNode): Promise<T>;
}

export interface Prisma {
  $exists: Exists;
  $graphql: <T = any>(
    query: string,
    variables?: { [key: string]: any }
  ) => Promise<T>;

  /**
   * Queries
   */

  listing: (where: ListingWhereUniqueInput) => ListingNullablePromise;
  listings: (args?: {
    where?: ListingWhereInput;
    orderBy?: ListingOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Listing>;
  listingsConnection: (args?: {
    where?: ListingWhereInput;
    orderBy?: ListingOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => ListingConnectionPromise;
  template: (where: TemplateWhereUniqueInput) => TemplateNullablePromise;
  templates: (args?: {
    where?: TemplateWhereInput;
    orderBy?: TemplateOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Template>;
  templatesConnection: (args?: {
    where?: TemplateWhereInput;
    orderBy?: TemplateOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => TemplateConnectionPromise;
  user: (where: UserWhereUniqueInput) => UserNullablePromise;
  users: (args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<User>;
  usersConnection: (args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => UserConnectionPromise;
  node: (args: { id: ID_Output }) => Node;

  /**
   * Mutations
   */

  createListing: (data: ListingCreateInput) => ListingPromise;
  updateListing: (args: {
    data: ListingUpdateInput;
    where: ListingWhereUniqueInput;
  }) => ListingPromise;
  updateManyListings: (args: {
    data: ListingUpdateManyMutationInput;
    where?: ListingWhereInput;
  }) => BatchPayloadPromise;
  upsertListing: (args: {
    where: ListingWhereUniqueInput;
    create: ListingCreateInput;
    update: ListingUpdateInput;
  }) => ListingPromise;
  deleteListing: (where: ListingWhereUniqueInput) => ListingPromise;
  deleteManyListings: (where?: ListingWhereInput) => BatchPayloadPromise;
  createTemplate: (data: TemplateCreateInput) => TemplatePromise;
  updateTemplate: (args: {
    data: TemplateUpdateInput;
    where: TemplateWhereUniqueInput;
  }) => TemplatePromise;
  upsertTemplate: (args: {
    where: TemplateWhereUniqueInput;
    create: TemplateCreateInput;
    update: TemplateUpdateInput;
  }) => TemplatePromise;
  deleteTemplate: (where: TemplateWhereUniqueInput) => TemplatePromise;
  deleteManyTemplates: (where?: TemplateWhereInput) => BatchPayloadPromise;
  createUser: (data: UserCreateInput) => UserPromise;
  updateUser: (args: {
    data: UserUpdateInput;
    where: UserWhereUniqueInput;
  }) => UserPromise;
  updateManyUsers: (args: {
    data: UserUpdateManyMutationInput;
    where?: UserWhereInput;
  }) => BatchPayloadPromise;
  upsertUser: (args: {
    where: UserWhereUniqueInput;
    create: UserCreateInput;
    update: UserUpdateInput;
  }) => UserPromise;
  deleteUser: (where: UserWhereUniqueInput) => UserPromise;
  deleteManyUsers: (where?: UserWhereInput) => BatchPayloadPromise;

  /**
   * Subscriptions
   */

  $subscribe: Subscription;
}

export interface Subscription {
  listing: (
    where?: ListingSubscriptionWhereInput
  ) => ListingSubscriptionPayloadSubscription;
  template: (
    where?: TemplateSubscriptionWhereInput
  ) => TemplateSubscriptionPayloadSubscription;
  user: (
    where?: UserSubscriptionWhereInput
  ) => UserSubscriptionPayloadSubscription;
}

export interface ClientConstructor<T> {
  new (options?: BaseClientOptions): T;
}

/**
 * Types
 */

export type ListingOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "address_ASC"
  | "address_DESC"
  | "description_ASC"
  | "description_DESC"
  | "mainImage_ASC"
  | "mainImage_DESC"
  | "rooms_ASC"
  | "rooms_DESC"
  | "bath_ASC"
  | "bath_DESC"
  | "lotSize_ASC"
  | "lotSize_DESC"
  | "houseSize_ASC"
  | "houseSize_DESC"
  | "price_ASC"
  | "price_DESC";

export type Permission =
  | "ADMIN"
  | "USER"
  | "LISTINGCREATE"
  | "LISTINGUPDATE"
  | "LISTINGDELETE"
  | "PERMISSIONUPDATE";

export type TemplateOrderByInput = "id_ASC" | "id_DESC";

export type UserOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "email_ASC"
  | "email_DESC"
  | "password_ASC"
  | "password_DESC"
  | "name_ASC"
  | "name_DESC"
  | "profilePicture_ASC"
  | "profilePicture_DESC"
  | "company_ASC"
  | "company_DESC"
  | "website_ASC"
  | "website_DESC"
  | "phone_ASC"
  | "phone_DESC"
  | "resetToken_ASC"
  | "resetToken_DESC"
  | "resetTokenExpiry_ASC"
  | "resetTokenExpiry_DESC";

export type MutationType = "CREATED" | "UPDATED" | "DELETED";

export interface ListingUpdateimagesInput {
  set?: Maybe<String[] | String>;
}

export type ListingWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export interface UserUpsertWithoutListingsInput {
  update: UserUpdateWithoutListingsDataInput;
  create: UserCreateWithoutListingsInput;
}

export interface ListingWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  address?: Maybe<String>;
  address_not?: Maybe<String>;
  address_in?: Maybe<String[] | String>;
  address_not_in?: Maybe<String[] | String>;
  address_lt?: Maybe<String>;
  address_lte?: Maybe<String>;
  address_gt?: Maybe<String>;
  address_gte?: Maybe<String>;
  address_contains?: Maybe<String>;
  address_not_contains?: Maybe<String>;
  address_starts_with?: Maybe<String>;
  address_not_starts_with?: Maybe<String>;
  address_ends_with?: Maybe<String>;
  address_not_ends_with?: Maybe<String>;
  description?: Maybe<String>;
  description_not?: Maybe<String>;
  description_in?: Maybe<String[] | String>;
  description_not_in?: Maybe<String[] | String>;
  description_lt?: Maybe<String>;
  description_lte?: Maybe<String>;
  description_gt?: Maybe<String>;
  description_gte?: Maybe<String>;
  description_contains?: Maybe<String>;
  description_not_contains?: Maybe<String>;
  description_starts_with?: Maybe<String>;
  description_not_starts_with?: Maybe<String>;
  description_ends_with?: Maybe<String>;
  description_not_ends_with?: Maybe<String>;
  mainImage?: Maybe<String>;
  mainImage_not?: Maybe<String>;
  mainImage_in?: Maybe<String[] | String>;
  mainImage_not_in?: Maybe<String[] | String>;
  mainImage_lt?: Maybe<String>;
  mainImage_lte?: Maybe<String>;
  mainImage_gt?: Maybe<String>;
  mainImage_gte?: Maybe<String>;
  mainImage_contains?: Maybe<String>;
  mainImage_not_contains?: Maybe<String>;
  mainImage_starts_with?: Maybe<String>;
  mainImage_not_starts_with?: Maybe<String>;
  mainImage_ends_with?: Maybe<String>;
  mainImage_not_ends_with?: Maybe<String>;
  rooms?: Maybe<Int>;
  rooms_not?: Maybe<Int>;
  rooms_in?: Maybe<Int[] | Int>;
  rooms_not_in?: Maybe<Int[] | Int>;
  rooms_lt?: Maybe<Int>;
  rooms_lte?: Maybe<Int>;
  rooms_gt?: Maybe<Int>;
  rooms_gte?: Maybe<Int>;
  bath?: Maybe<Float>;
  bath_not?: Maybe<Float>;
  bath_in?: Maybe<Float[] | Float>;
  bath_not_in?: Maybe<Float[] | Float>;
  bath_lt?: Maybe<Float>;
  bath_lte?: Maybe<Float>;
  bath_gt?: Maybe<Float>;
  bath_gte?: Maybe<Float>;
  lotSize?: Maybe<Int>;
  lotSize_not?: Maybe<Int>;
  lotSize_in?: Maybe<Int[] | Int>;
  lotSize_not_in?: Maybe<Int[] | Int>;
  lotSize_lt?: Maybe<Int>;
  lotSize_lte?: Maybe<Int>;
  lotSize_gt?: Maybe<Int>;
  lotSize_gte?: Maybe<Int>;
  houseSize?: Maybe<Int>;
  houseSize_not?: Maybe<Int>;
  houseSize_in?: Maybe<Int[] | Int>;
  houseSize_not_in?: Maybe<Int[] | Int>;
  houseSize_lt?: Maybe<Int>;
  houseSize_lte?: Maybe<Int>;
  houseSize_gt?: Maybe<Int>;
  houseSize_gte?: Maybe<Int>;
  price?: Maybe<Int>;
  price_not?: Maybe<Int>;
  price_in?: Maybe<Int[] | Int>;
  price_not_in?: Maybe<Int[] | Int>;
  price_lt?: Maybe<Int>;
  price_lte?: Maybe<Int>;
  price_gt?: Maybe<Int>;
  price_gte?: Maybe<Int>;
  user?: Maybe<UserWhereInput>;
  AND?: Maybe<ListingWhereInput[] | ListingWhereInput>;
  OR?: Maybe<ListingWhereInput[] | ListingWhereInput>;
  NOT?: Maybe<ListingWhereInput[] | ListingWhereInput>;
}

export interface TemplateUpdateInput {
  listing?: Maybe<ListingUpdateOneRequiredInput>;
}

export interface ListingUpdateManyMutationInput {
  address?: Maybe<String>;
  description?: Maybe<String>;
  mainImage?: Maybe<String>;
  images?: Maybe<ListingUpdateimagesInput>;
  rooms?: Maybe<Int>;
  bath?: Maybe<Float>;
  lotSize?: Maybe<Int>;
  houseSize?: Maybe<Int>;
  price?: Maybe<Int>;
}

export interface ListingCreateInput {
  id?: Maybe<ID_Input>;
  address: String;
  description: String;
  mainImage: String;
  images?: Maybe<ListingCreateimagesInput>;
  rooms: Int;
  bath: Float;
  lotSize: Int;
  houseSize: Int;
  price: Int;
  user: UserCreateOneWithoutListingsInput;
}

export interface TemplateSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<TemplateWhereInput>;
  AND?: Maybe<
    TemplateSubscriptionWhereInput[] | TemplateSubscriptionWhereInput
  >;
  OR?: Maybe<TemplateSubscriptionWhereInput[] | TemplateSubscriptionWhereInput>;
  NOT?: Maybe<
    TemplateSubscriptionWhereInput[] | TemplateSubscriptionWhereInput
  >;
}

export interface ListingCreateimagesInput {
  set?: Maybe<String[] | String>;
}

export interface UserUpdateManyMutationInput {
  email?: Maybe<String>;
  password?: Maybe<String>;
  name?: Maybe<String>;
  profilePicture?: Maybe<String>;
  company?: Maybe<String>;
  website?: Maybe<String>;
  phone?: Maybe<String>;
  resetToken?: Maybe<String>;
  resetTokenExpiry?: Maybe<String>;
  permissions?: Maybe<UserUpdatepermissionsInput>;
}

export interface UserCreateOneWithoutListingsInput {
  create?: Maybe<UserCreateWithoutListingsInput>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export type TemplateWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export interface UserCreateWithoutListingsInput {
  id?: Maybe<ID_Input>;
  email: String;
  password: String;
  name: String;
  profilePicture?: Maybe<String>;
  company?: Maybe<String>;
  website?: Maybe<String>;
  phone?: Maybe<String>;
  resetToken?: Maybe<String>;
  resetTokenExpiry?: Maybe<String>;
  permissions?: Maybe<UserCreatepermissionsInput>;
}

export interface TemplateWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  listing?: Maybe<ListingWhereInput>;
  AND?: Maybe<TemplateWhereInput[] | TemplateWhereInput>;
  OR?: Maybe<TemplateWhereInput[] | TemplateWhereInput>;
  NOT?: Maybe<TemplateWhereInput[] | TemplateWhereInput>;
}

export interface UserCreatepermissionsInput {
  set?: Maybe<Permission[] | Permission>;
}

export interface ListingUpsertWithWhereUniqueWithoutUserInput {
  where: ListingWhereUniqueInput;
  update: ListingUpdateWithoutUserDataInput;
  create: ListingCreateWithoutUserInput;
}

export interface ListingUpdateInput {
  address?: Maybe<String>;
  description?: Maybe<String>;
  mainImage?: Maybe<String>;
  images?: Maybe<ListingUpdateimagesInput>;
  rooms?: Maybe<Int>;
  bath?: Maybe<Float>;
  lotSize?: Maybe<Int>;
  houseSize?: Maybe<Int>;
  price?: Maybe<Int>;
  user?: Maybe<UserUpdateOneRequiredWithoutListingsInput>;
}

export interface ListingUpdateWithWhereUniqueWithoutUserInput {
  where: ListingWhereUniqueInput;
  data: ListingUpdateWithoutUserDataInput;
}

export interface UserCreateInput {
  id?: Maybe<ID_Input>;
  email: String;
  password: String;
  name: String;
  profilePicture?: Maybe<String>;
  company?: Maybe<String>;
  website?: Maybe<String>;
  phone?: Maybe<String>;
  listings?: Maybe<ListingCreateManyWithoutUserInput>;
  resetToken?: Maybe<String>;
  resetTokenExpiry?: Maybe<String>;
  permissions?: Maybe<UserCreatepermissionsInput>;
}

export interface ListingUpdateManyWithoutUserInput {
  create?: Maybe<
    ListingCreateWithoutUserInput[] | ListingCreateWithoutUserInput
  >;
  delete?: Maybe<ListingWhereUniqueInput[] | ListingWhereUniqueInput>;
  connect?: Maybe<ListingWhereUniqueInput[] | ListingWhereUniqueInput>;
  set?: Maybe<ListingWhereUniqueInput[] | ListingWhereUniqueInput>;
  disconnect?: Maybe<ListingWhereUniqueInput[] | ListingWhereUniqueInput>;
  update?: Maybe<
    | ListingUpdateWithWhereUniqueWithoutUserInput[]
    | ListingUpdateWithWhereUniqueWithoutUserInput
  >;
  upsert?: Maybe<
    | ListingUpsertWithWhereUniqueWithoutUserInput[]
    | ListingUpsertWithWhereUniqueWithoutUserInput
  >;
  deleteMany?: Maybe<ListingScalarWhereInput[] | ListingScalarWhereInput>;
  updateMany?: Maybe<
    | ListingUpdateManyWithWhereNestedInput[]
    | ListingUpdateManyWithWhereNestedInput
  >;
}

export interface UserUpdateOneRequiredWithoutListingsInput {
  create?: Maybe<UserCreateWithoutListingsInput>;
  update?: Maybe<UserUpdateWithoutListingsDataInput>;
  upsert?: Maybe<UserUpsertWithoutListingsInput>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface ListingCreateWithoutUserInput {
  id?: Maybe<ID_Input>;
  address: String;
  description: String;
  mainImage: String;
  images?: Maybe<ListingCreateimagesInput>;
  rooms: Int;
  bath: Float;
  lotSize: Int;
  houseSize: Int;
  price: Int;
}

export interface UserUpdateWithoutListingsDataInput {
  email?: Maybe<String>;
  password?: Maybe<String>;
  name?: Maybe<String>;
  profilePicture?: Maybe<String>;
  company?: Maybe<String>;
  website?: Maybe<String>;
  phone?: Maybe<String>;
  resetToken?: Maybe<String>;
  resetTokenExpiry?: Maybe<String>;
  permissions?: Maybe<UserUpdatepermissionsInput>;
}

export interface UserSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<UserWhereInput>;
  AND?: Maybe<UserSubscriptionWhereInput[] | UserSubscriptionWhereInput>;
  OR?: Maybe<UserSubscriptionWhereInput[] | UserSubscriptionWhereInput>;
  NOT?: Maybe<UserSubscriptionWhereInput[] | UserSubscriptionWhereInput>;
}

export interface UserUpdatepermissionsInput {
  set?: Maybe<Permission[] | Permission>;
}

export interface ListingUpdateManyDataInput {
  address?: Maybe<String>;
  description?: Maybe<String>;
  mainImage?: Maybe<String>;
  images?: Maybe<ListingUpdateimagesInput>;
  rooms?: Maybe<Int>;
  bath?: Maybe<Float>;
  lotSize?: Maybe<Int>;
  houseSize?: Maybe<Int>;
  price?: Maybe<Int>;
}

export interface UserWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  email?: Maybe<String>;
  email_not?: Maybe<String>;
  email_in?: Maybe<String[] | String>;
  email_not_in?: Maybe<String[] | String>;
  email_lt?: Maybe<String>;
  email_lte?: Maybe<String>;
  email_gt?: Maybe<String>;
  email_gte?: Maybe<String>;
  email_contains?: Maybe<String>;
  email_not_contains?: Maybe<String>;
  email_starts_with?: Maybe<String>;
  email_not_starts_with?: Maybe<String>;
  email_ends_with?: Maybe<String>;
  email_not_ends_with?: Maybe<String>;
  password?: Maybe<String>;
  password_not?: Maybe<String>;
  password_in?: Maybe<String[] | String>;
  password_not_in?: Maybe<String[] | String>;
  password_lt?: Maybe<String>;
  password_lte?: Maybe<String>;
  password_gt?: Maybe<String>;
  password_gte?: Maybe<String>;
  password_contains?: Maybe<String>;
  password_not_contains?: Maybe<String>;
  password_starts_with?: Maybe<String>;
  password_not_starts_with?: Maybe<String>;
  password_ends_with?: Maybe<String>;
  password_not_ends_with?: Maybe<String>;
  name?: Maybe<String>;
  name_not?: Maybe<String>;
  name_in?: Maybe<String[] | String>;
  name_not_in?: Maybe<String[] | String>;
  name_lt?: Maybe<String>;
  name_lte?: Maybe<String>;
  name_gt?: Maybe<String>;
  name_gte?: Maybe<String>;
  name_contains?: Maybe<String>;
  name_not_contains?: Maybe<String>;
  name_starts_with?: Maybe<String>;
  name_not_starts_with?: Maybe<String>;
  name_ends_with?: Maybe<String>;
  name_not_ends_with?: Maybe<String>;
  profilePicture?: Maybe<String>;
  profilePicture_not?: Maybe<String>;
  profilePicture_in?: Maybe<String[] | String>;
  profilePicture_not_in?: Maybe<String[] | String>;
  profilePicture_lt?: Maybe<String>;
  profilePicture_lte?: Maybe<String>;
  profilePicture_gt?: Maybe<String>;
  profilePicture_gte?: Maybe<String>;
  profilePicture_contains?: Maybe<String>;
  profilePicture_not_contains?: Maybe<String>;
  profilePicture_starts_with?: Maybe<String>;
  profilePicture_not_starts_with?: Maybe<String>;
  profilePicture_ends_with?: Maybe<String>;
  profilePicture_not_ends_with?: Maybe<String>;
  company?: Maybe<String>;
  company_not?: Maybe<String>;
  company_in?: Maybe<String[] | String>;
  company_not_in?: Maybe<String[] | String>;
  company_lt?: Maybe<String>;
  company_lte?: Maybe<String>;
  company_gt?: Maybe<String>;
  company_gte?: Maybe<String>;
  company_contains?: Maybe<String>;
  company_not_contains?: Maybe<String>;
  company_starts_with?: Maybe<String>;
  company_not_starts_with?: Maybe<String>;
  company_ends_with?: Maybe<String>;
  company_not_ends_with?: Maybe<String>;
  website?: Maybe<String>;
  website_not?: Maybe<String>;
  website_in?: Maybe<String[] | String>;
  website_not_in?: Maybe<String[] | String>;
  website_lt?: Maybe<String>;
  website_lte?: Maybe<String>;
  website_gt?: Maybe<String>;
  website_gte?: Maybe<String>;
  website_contains?: Maybe<String>;
  website_not_contains?: Maybe<String>;
  website_starts_with?: Maybe<String>;
  website_not_starts_with?: Maybe<String>;
  website_ends_with?: Maybe<String>;
  website_not_ends_with?: Maybe<String>;
  phone?: Maybe<String>;
  phone_not?: Maybe<String>;
  phone_in?: Maybe<String[] | String>;
  phone_not_in?: Maybe<String[] | String>;
  phone_lt?: Maybe<String>;
  phone_lte?: Maybe<String>;
  phone_gt?: Maybe<String>;
  phone_gte?: Maybe<String>;
  phone_contains?: Maybe<String>;
  phone_not_contains?: Maybe<String>;
  phone_starts_with?: Maybe<String>;
  phone_not_starts_with?: Maybe<String>;
  phone_ends_with?: Maybe<String>;
  phone_not_ends_with?: Maybe<String>;
  listings_every?: Maybe<ListingWhereInput>;
  listings_some?: Maybe<ListingWhereInput>;
  listings_none?: Maybe<ListingWhereInput>;
  resetToken?: Maybe<String>;
  resetToken_not?: Maybe<String>;
  resetToken_in?: Maybe<String[] | String>;
  resetToken_not_in?: Maybe<String[] | String>;
  resetToken_lt?: Maybe<String>;
  resetToken_lte?: Maybe<String>;
  resetToken_gt?: Maybe<String>;
  resetToken_gte?: Maybe<String>;
  resetToken_contains?: Maybe<String>;
  resetToken_not_contains?: Maybe<String>;
  resetToken_starts_with?: Maybe<String>;
  resetToken_not_starts_with?: Maybe<String>;
  resetToken_ends_with?: Maybe<String>;
  resetToken_not_ends_with?: Maybe<String>;
  resetTokenExpiry?: Maybe<String>;
  resetTokenExpiry_not?: Maybe<String>;
  resetTokenExpiry_in?: Maybe<String[] | String>;
  resetTokenExpiry_not_in?: Maybe<String[] | String>;
  resetTokenExpiry_lt?: Maybe<String>;
  resetTokenExpiry_lte?: Maybe<String>;
  resetTokenExpiry_gt?: Maybe<String>;
  resetTokenExpiry_gte?: Maybe<String>;
  resetTokenExpiry_contains?: Maybe<String>;
  resetTokenExpiry_not_contains?: Maybe<String>;
  resetTokenExpiry_starts_with?: Maybe<String>;
  resetTokenExpiry_not_starts_with?: Maybe<String>;
  resetTokenExpiry_ends_with?: Maybe<String>;
  resetTokenExpiry_not_ends_with?: Maybe<String>;
  AND?: Maybe<UserWhereInput[] | UserWhereInput>;
  OR?: Maybe<UserWhereInput[] | UserWhereInput>;
  NOT?: Maybe<UserWhereInput[] | UserWhereInput>;
}

export interface ListingScalarWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  address?: Maybe<String>;
  address_not?: Maybe<String>;
  address_in?: Maybe<String[] | String>;
  address_not_in?: Maybe<String[] | String>;
  address_lt?: Maybe<String>;
  address_lte?: Maybe<String>;
  address_gt?: Maybe<String>;
  address_gte?: Maybe<String>;
  address_contains?: Maybe<String>;
  address_not_contains?: Maybe<String>;
  address_starts_with?: Maybe<String>;
  address_not_starts_with?: Maybe<String>;
  address_ends_with?: Maybe<String>;
  address_not_ends_with?: Maybe<String>;
  description?: Maybe<String>;
  description_not?: Maybe<String>;
  description_in?: Maybe<String[] | String>;
  description_not_in?: Maybe<String[] | String>;
  description_lt?: Maybe<String>;
  description_lte?: Maybe<String>;
  description_gt?: Maybe<String>;
  description_gte?: Maybe<String>;
  description_contains?: Maybe<String>;
  description_not_contains?: Maybe<String>;
  description_starts_with?: Maybe<String>;
  description_not_starts_with?: Maybe<String>;
  description_ends_with?: Maybe<String>;
  description_not_ends_with?: Maybe<String>;
  mainImage?: Maybe<String>;
  mainImage_not?: Maybe<String>;
  mainImage_in?: Maybe<String[] | String>;
  mainImage_not_in?: Maybe<String[] | String>;
  mainImage_lt?: Maybe<String>;
  mainImage_lte?: Maybe<String>;
  mainImage_gt?: Maybe<String>;
  mainImage_gte?: Maybe<String>;
  mainImage_contains?: Maybe<String>;
  mainImage_not_contains?: Maybe<String>;
  mainImage_starts_with?: Maybe<String>;
  mainImage_not_starts_with?: Maybe<String>;
  mainImage_ends_with?: Maybe<String>;
  mainImage_not_ends_with?: Maybe<String>;
  rooms?: Maybe<Int>;
  rooms_not?: Maybe<Int>;
  rooms_in?: Maybe<Int[] | Int>;
  rooms_not_in?: Maybe<Int[] | Int>;
  rooms_lt?: Maybe<Int>;
  rooms_lte?: Maybe<Int>;
  rooms_gt?: Maybe<Int>;
  rooms_gte?: Maybe<Int>;
  bath?: Maybe<Float>;
  bath_not?: Maybe<Float>;
  bath_in?: Maybe<Float[] | Float>;
  bath_not_in?: Maybe<Float[] | Float>;
  bath_lt?: Maybe<Float>;
  bath_lte?: Maybe<Float>;
  bath_gt?: Maybe<Float>;
  bath_gte?: Maybe<Float>;
  lotSize?: Maybe<Int>;
  lotSize_not?: Maybe<Int>;
  lotSize_in?: Maybe<Int[] | Int>;
  lotSize_not_in?: Maybe<Int[] | Int>;
  lotSize_lt?: Maybe<Int>;
  lotSize_lte?: Maybe<Int>;
  lotSize_gt?: Maybe<Int>;
  lotSize_gte?: Maybe<Int>;
  houseSize?: Maybe<Int>;
  houseSize_not?: Maybe<Int>;
  houseSize_in?: Maybe<Int[] | Int>;
  houseSize_not_in?: Maybe<Int[] | Int>;
  houseSize_lt?: Maybe<Int>;
  houseSize_lte?: Maybe<Int>;
  houseSize_gt?: Maybe<Int>;
  houseSize_gte?: Maybe<Int>;
  price?: Maybe<Int>;
  price_not?: Maybe<Int>;
  price_in?: Maybe<Int[] | Int>;
  price_not_in?: Maybe<Int[] | Int>;
  price_lt?: Maybe<Int>;
  price_lte?: Maybe<Int>;
  price_gt?: Maybe<Int>;
  price_gte?: Maybe<Int>;
  AND?: Maybe<ListingScalarWhereInput[] | ListingScalarWhereInput>;
  OR?: Maybe<ListingScalarWhereInput[] | ListingScalarWhereInput>;
  NOT?: Maybe<ListingScalarWhereInput[] | ListingScalarWhereInput>;
}

export interface ListingUpsertNestedInput {
  update: ListingUpdateDataInput;
  create: ListingCreateInput;
}

export type UserWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
  email?: Maybe<String>;
}>;

export interface ListingCreateOneInput {
  create?: Maybe<ListingCreateInput>;
  connect?: Maybe<ListingWhereUniqueInput>;
}

export interface TemplateCreateInput {
  id?: Maybe<ID_Input>;
  listing: ListingCreateOneInput;
}

export interface ListingUpdateOneRequiredInput {
  create?: Maybe<ListingCreateInput>;
  update?: Maybe<ListingUpdateDataInput>;
  upsert?: Maybe<ListingUpsertNestedInput>;
  connect?: Maybe<ListingWhereUniqueInput>;
}

export interface ListingUpdateDataInput {
  address?: Maybe<String>;
  description?: Maybe<String>;
  mainImage?: Maybe<String>;
  images?: Maybe<ListingUpdateimagesInput>;
  rooms?: Maybe<Int>;
  bath?: Maybe<Float>;
  lotSize?: Maybe<Int>;
  houseSize?: Maybe<Int>;
  price?: Maybe<Int>;
  user?: Maybe<UserUpdateOneRequiredWithoutListingsInput>;
}

export interface UserUpdateInput {
  email?: Maybe<String>;
  password?: Maybe<String>;
  name?: Maybe<String>;
  profilePicture?: Maybe<String>;
  company?: Maybe<String>;
  website?: Maybe<String>;
  phone?: Maybe<String>;
  listings?: Maybe<ListingUpdateManyWithoutUserInput>;
  resetToken?: Maybe<String>;
  resetTokenExpiry?: Maybe<String>;
  permissions?: Maybe<UserUpdatepermissionsInput>;
}

export interface ListingUpdateWithoutUserDataInput {
  address?: Maybe<String>;
  description?: Maybe<String>;
  mainImage?: Maybe<String>;
  images?: Maybe<ListingUpdateimagesInput>;
  rooms?: Maybe<Int>;
  bath?: Maybe<Float>;
  lotSize?: Maybe<Int>;
  houseSize?: Maybe<Int>;
  price?: Maybe<Int>;
}

export interface ListingUpdateManyWithWhereNestedInput {
  where: ListingScalarWhereInput;
  data: ListingUpdateManyDataInput;
}

export interface ListingSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<ListingWhereInput>;
  AND?: Maybe<ListingSubscriptionWhereInput[] | ListingSubscriptionWhereInput>;
  OR?: Maybe<ListingSubscriptionWhereInput[] | ListingSubscriptionWhereInput>;
  NOT?: Maybe<ListingSubscriptionWhereInput[] | ListingSubscriptionWhereInput>;
}

export interface ListingCreateManyWithoutUserInput {
  create?: Maybe<
    ListingCreateWithoutUserInput[] | ListingCreateWithoutUserInput
  >;
  connect?: Maybe<ListingWhereUniqueInput[] | ListingWhereUniqueInput>;
}

export interface NodeNode {
  id: ID_Output;
}

export interface UserPreviousValues {
  id: ID_Output;
  email: String;
  password: String;
  name: String;
  profilePicture?: String;
  company?: String;
  website?: String;
  phone?: String;
  resetToken?: String;
  resetTokenExpiry?: String;
  permissions: Permission[];
}

export interface UserPreviousValuesPromise
  extends Promise<UserPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  email: () => Promise<String>;
  password: () => Promise<String>;
  name: () => Promise<String>;
  profilePicture: () => Promise<String>;
  company: () => Promise<String>;
  website: () => Promise<String>;
  phone: () => Promise<String>;
  resetToken: () => Promise<String>;
  resetTokenExpiry: () => Promise<String>;
  permissions: () => Promise<Permission[]>;
}

export interface UserPreviousValuesSubscription
  extends Promise<AsyncIterator<UserPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  email: () => Promise<AsyncIterator<String>>;
  password: () => Promise<AsyncIterator<String>>;
  name: () => Promise<AsyncIterator<String>>;
  profilePicture: () => Promise<AsyncIterator<String>>;
  company: () => Promise<AsyncIterator<String>>;
  website: () => Promise<AsyncIterator<String>>;
  phone: () => Promise<AsyncIterator<String>>;
  resetToken: () => Promise<AsyncIterator<String>>;
  resetTokenExpiry: () => Promise<AsyncIterator<String>>;
  permissions: () => Promise<AsyncIterator<Permission[]>>;
}

export interface Template {
  id: ID_Output;
}

export interface TemplatePromise extends Promise<Template>, Fragmentable {
  id: () => Promise<ID_Output>;
  listing: <T = ListingPromise>() => T;
}

export interface TemplateSubscription
  extends Promise<AsyncIterator<Template>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  listing: <T = ListingSubscription>() => T;
}

export interface TemplateNullablePromise
  extends Promise<Template | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  listing: <T = ListingPromise>() => T;
}

export interface User {
  id: ID_Output;
  email: String;
  password: String;
  name: String;
  profilePicture?: String;
  company?: String;
  website?: String;
  phone?: String;
  resetToken?: String;
  resetTokenExpiry?: String;
  permissions: Permission[];
}

export interface UserPromise extends Promise<User>, Fragmentable {
  id: () => Promise<ID_Output>;
  email: () => Promise<String>;
  password: () => Promise<String>;
  name: () => Promise<String>;
  profilePicture: () => Promise<String>;
  company: () => Promise<String>;
  website: () => Promise<String>;
  phone: () => Promise<String>;
  listings: <T = FragmentableArray<Listing>>(args?: {
    where?: ListingWhereInput;
    orderBy?: ListingOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  resetToken: () => Promise<String>;
  resetTokenExpiry: () => Promise<String>;
  permissions: () => Promise<Permission[]>;
}

export interface UserSubscription
  extends Promise<AsyncIterator<User>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  email: () => Promise<AsyncIterator<String>>;
  password: () => Promise<AsyncIterator<String>>;
  name: () => Promise<AsyncIterator<String>>;
  profilePicture: () => Promise<AsyncIterator<String>>;
  company: () => Promise<AsyncIterator<String>>;
  website: () => Promise<AsyncIterator<String>>;
  phone: () => Promise<AsyncIterator<String>>;
  listings: <T = Promise<AsyncIterator<ListingSubscription>>>(args?: {
    where?: ListingWhereInput;
    orderBy?: ListingOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  resetToken: () => Promise<AsyncIterator<String>>;
  resetTokenExpiry: () => Promise<AsyncIterator<String>>;
  permissions: () => Promise<AsyncIterator<Permission[]>>;
}

export interface UserNullablePromise
  extends Promise<User | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  email: () => Promise<String>;
  password: () => Promise<String>;
  name: () => Promise<String>;
  profilePicture: () => Promise<String>;
  company: () => Promise<String>;
  website: () => Promise<String>;
  phone: () => Promise<String>;
  listings: <T = FragmentableArray<Listing>>(args?: {
    where?: ListingWhereInput;
    orderBy?: ListingOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  resetToken: () => Promise<String>;
  resetTokenExpiry: () => Promise<String>;
  permissions: () => Promise<Permission[]>;
}

export interface ListingConnection {
  pageInfo: PageInfo;
  edges: ListingEdge[];
}

export interface ListingConnectionPromise
  extends Promise<ListingConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<ListingEdge>>() => T;
  aggregate: <T = AggregateListingPromise>() => T;
}

export interface ListingConnectionSubscription
  extends Promise<AsyncIterator<ListingConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<ListingEdgeSubscription>>>() => T;
  aggregate: <T = AggregateListingSubscription>() => T;
}

export interface PageInfo {
  hasNextPage: Boolean;
  hasPreviousPage: Boolean;
  startCursor?: String;
  endCursor?: String;
}

export interface PageInfoPromise extends Promise<PageInfo>, Fragmentable {
  hasNextPage: () => Promise<Boolean>;
  hasPreviousPage: () => Promise<Boolean>;
  startCursor: () => Promise<String>;
  endCursor: () => Promise<String>;
}

export interface PageInfoSubscription
  extends Promise<AsyncIterator<PageInfo>>,
    Fragmentable {
  hasNextPage: () => Promise<AsyncIterator<Boolean>>;
  hasPreviousPage: () => Promise<AsyncIterator<Boolean>>;
  startCursor: () => Promise<AsyncIterator<String>>;
  endCursor: () => Promise<AsyncIterator<String>>;
}

export interface BatchPayload {
  count: Long;
}

export interface BatchPayloadPromise
  extends Promise<BatchPayload>,
    Fragmentable {
  count: () => Promise<Long>;
}

export interface BatchPayloadSubscription
  extends Promise<AsyncIterator<BatchPayload>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Long>>;
}

export interface AggregateListing {
  count: Int;
}

export interface AggregateListingPromise
  extends Promise<AggregateListing>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateListingSubscription
  extends Promise<AsyncIterator<AggregateListing>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface TemplatePreviousValues {
  id: ID_Output;
}

export interface TemplatePreviousValuesPromise
  extends Promise<TemplatePreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
}

export interface TemplatePreviousValuesSubscription
  extends Promise<AsyncIterator<TemplatePreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
}

export interface UserEdge {
  node: User;
  cursor: String;
}

export interface UserEdgePromise extends Promise<UserEdge>, Fragmentable {
  node: <T = UserPromise>() => T;
  cursor: () => Promise<String>;
}

export interface UserEdgeSubscription
  extends Promise<AsyncIterator<UserEdge>>,
    Fragmentable {
  node: <T = UserSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface ListingEdge {
  node: Listing;
  cursor: String;
}

export interface ListingEdgePromise extends Promise<ListingEdge>, Fragmentable {
  node: <T = ListingPromise>() => T;
  cursor: () => Promise<String>;
}

export interface ListingEdgeSubscription
  extends Promise<AsyncIterator<ListingEdge>>,
    Fragmentable {
  node: <T = ListingSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface UserSubscriptionPayload {
  mutation: MutationType;
  node: User;
  updatedFields: String[];
  previousValues: UserPreviousValues;
}

export interface UserSubscriptionPayloadPromise
  extends Promise<UserSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = UserPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = UserPreviousValuesPromise>() => T;
}

export interface UserSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<UserSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = UserSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = UserPreviousValuesSubscription>() => T;
}

export interface TemplateEdge {
  node: Template;
  cursor: String;
}

export interface TemplateEdgePromise
  extends Promise<TemplateEdge>,
    Fragmentable {
  node: <T = TemplatePromise>() => T;
  cursor: () => Promise<String>;
}

export interface TemplateEdgeSubscription
  extends Promise<AsyncIterator<TemplateEdge>>,
    Fragmentable {
  node: <T = TemplateSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface ListingPreviousValues {
  id: ID_Output;
  address: String;
  description: String;
  mainImage: String;
  images: String[];
  rooms: Int;
  bath: Float;
  lotSize: Int;
  houseSize: Int;
  price: Int;
}

export interface ListingPreviousValuesPromise
  extends Promise<ListingPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  address: () => Promise<String>;
  description: () => Promise<String>;
  mainImage: () => Promise<String>;
  images: () => Promise<String[]>;
  rooms: () => Promise<Int>;
  bath: () => Promise<Float>;
  lotSize: () => Promise<Int>;
  houseSize: () => Promise<Int>;
  price: () => Promise<Int>;
}

export interface ListingPreviousValuesSubscription
  extends Promise<AsyncIterator<ListingPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  address: () => Promise<AsyncIterator<String>>;
  description: () => Promise<AsyncIterator<String>>;
  mainImage: () => Promise<AsyncIterator<String>>;
  images: () => Promise<AsyncIterator<String[]>>;
  rooms: () => Promise<AsyncIterator<Int>>;
  bath: () => Promise<AsyncIterator<Float>>;
  lotSize: () => Promise<AsyncIterator<Int>>;
  houseSize: () => Promise<AsyncIterator<Int>>;
  price: () => Promise<AsyncIterator<Int>>;
}

export interface ListingSubscriptionPayload {
  mutation: MutationType;
  node: Listing;
  updatedFields: String[];
  previousValues: ListingPreviousValues;
}

export interface ListingSubscriptionPayloadPromise
  extends Promise<ListingSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = ListingPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = ListingPreviousValuesPromise>() => T;
}

export interface ListingSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<ListingSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = ListingSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = ListingPreviousValuesSubscription>() => T;
}

export interface Listing {
  id: ID_Output;
  address: String;
  description: String;
  mainImage: String;
  images: String[];
  rooms: Int;
  bath: Float;
  lotSize: Int;
  houseSize: Int;
  price: Int;
}

export interface ListingPromise extends Promise<Listing>, Fragmentable {
  id: () => Promise<ID_Output>;
  address: () => Promise<String>;
  description: () => Promise<String>;
  mainImage: () => Promise<String>;
  images: () => Promise<String[]>;
  rooms: () => Promise<Int>;
  bath: () => Promise<Float>;
  lotSize: () => Promise<Int>;
  houseSize: () => Promise<Int>;
  price: () => Promise<Int>;
  user: <T = UserPromise>() => T;
}

export interface ListingSubscription
  extends Promise<AsyncIterator<Listing>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  address: () => Promise<AsyncIterator<String>>;
  description: () => Promise<AsyncIterator<String>>;
  mainImage: () => Promise<AsyncIterator<String>>;
  images: () => Promise<AsyncIterator<String[]>>;
  rooms: () => Promise<AsyncIterator<Int>>;
  bath: () => Promise<AsyncIterator<Float>>;
  lotSize: () => Promise<AsyncIterator<Int>>;
  houseSize: () => Promise<AsyncIterator<Int>>;
  price: () => Promise<AsyncIterator<Int>>;
  user: <T = UserSubscription>() => T;
}

export interface ListingNullablePromise
  extends Promise<Listing | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  address: () => Promise<String>;
  description: () => Promise<String>;
  mainImage: () => Promise<String>;
  images: () => Promise<String[]>;
  rooms: () => Promise<Int>;
  bath: () => Promise<Float>;
  lotSize: () => Promise<Int>;
  houseSize: () => Promise<Int>;
  price: () => Promise<Int>;
  user: <T = UserPromise>() => T;
}

export interface TemplateSubscriptionPayload {
  mutation: MutationType;
  node: Template;
  updatedFields: String[];
  previousValues: TemplatePreviousValues;
}

export interface TemplateSubscriptionPayloadPromise
  extends Promise<TemplateSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = TemplatePromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = TemplatePreviousValuesPromise>() => T;
}

export interface TemplateSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<TemplateSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = TemplateSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = TemplatePreviousValuesSubscription>() => T;
}

export interface TemplateConnection {
  pageInfo: PageInfo;
  edges: TemplateEdge[];
}

export interface TemplateConnectionPromise
  extends Promise<TemplateConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<TemplateEdge>>() => T;
  aggregate: <T = AggregateTemplatePromise>() => T;
}

export interface TemplateConnectionSubscription
  extends Promise<AsyncIterator<TemplateConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<TemplateEdgeSubscription>>>() => T;
  aggregate: <T = AggregateTemplateSubscription>() => T;
}

export interface AggregateTemplate {
  count: Int;
}

export interface AggregateTemplatePromise
  extends Promise<AggregateTemplate>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateTemplateSubscription
  extends Promise<AsyncIterator<AggregateTemplate>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface UserConnection {
  pageInfo: PageInfo;
  edges: UserEdge[];
}

export interface UserConnectionPromise
  extends Promise<UserConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<UserEdge>>() => T;
  aggregate: <T = AggregateUserPromise>() => T;
}

export interface UserConnectionSubscription
  extends Promise<AsyncIterator<UserConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<UserEdgeSubscription>>>() => T;
  aggregate: <T = AggregateUserSubscription>() => T;
}

export interface AggregateUser {
  count: Int;
}

export interface AggregateUserPromise
  extends Promise<AggregateUser>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateUserSubscription
  extends Promise<AsyncIterator<AggregateUser>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export type Long = string;

/*
The `Float` scalar type represents signed double-precision fractional values as specified by [IEEE 754](http://en.wikipedia.org/wiki/IEEE_floating_point). 
*/
export type Float = number;

/*
The `String` scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.
*/
export type String = string;

/*
The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1. 
*/
export type Int = number;

/*
The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as `"4"`) or integer (such as `4`) input value will be accepted as an ID.
*/
export type ID_Input = string | number;
export type ID_Output = string;

/*
The `Boolean` scalar type represents `true` or `false`.
*/
export type Boolean = boolean;

/**
 * Model Metadata
 */

export const models: Model[] = [
  {
    name: "Permission",
    embedded: false
  },
  {
    name: "User",
    embedded: false
  },
  {
    name: "Listing",
    embedded: false
  },
  {
    name: "Template",
    embedded: false
  }
];

/**
 * Type Defs
 */

export const Prisma = makePrismaClientClass<ClientConstructor<Prisma>>({
  typeDefs,
  models,
  endpoint: `${process.env["PRISMA_ENDPOINT"]}`
});
export const prisma = new Prisma();

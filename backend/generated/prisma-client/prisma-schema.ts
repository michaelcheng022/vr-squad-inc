// Code generated by Prisma (prisma@1.33.0). DO NOT EDIT.
  // Please don't change this file manually but run `prisma generate` to update it.
  // For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

export const typeDefs = /* GraphQL */ `type AggregateListing {
  count: Int!
}

type AggregateTemplate {
  count: Int!
}

type AggregateUser {
  count: Int!
}

type BatchPayload {
  count: Long!
}

type Listing {
  id: ID!
  address: String!
  description: String!
  rooms: Int!
  bath: Int!
  lotSize: Int!
  houseSize: Int!
  price: Int!
  user: User!
}

type ListingConnection {
  pageInfo: PageInfo!
  edges: [ListingEdge]!
  aggregate: AggregateListing!
}

input ListingCreateInput {
  id: ID
  address: String!
  description: String!
  rooms: Int!
  bath: Int!
  lotSize: Int!
  houseSize: Int!
  price: Int!
  user: UserCreateOneWithoutListingsInput!
}

input ListingCreateManyWithoutUserInput {
  create: [ListingCreateWithoutUserInput!]
  connect: [ListingWhereUniqueInput!]
}

input ListingCreateOneInput {
  create: ListingCreateInput
  connect: ListingWhereUniqueInput
}

input ListingCreateWithoutUserInput {
  id: ID
  address: String!
  description: String!
  rooms: Int!
  bath: Int!
  lotSize: Int!
  houseSize: Int!
  price: Int!
}

type ListingEdge {
  node: Listing!
  cursor: String!
}

enum ListingOrderByInput {
  id_ASC
  id_DESC
  address_ASC
  address_DESC
  description_ASC
  description_DESC
  rooms_ASC
  rooms_DESC
  bath_ASC
  bath_DESC
  lotSize_ASC
  lotSize_DESC
  houseSize_ASC
  houseSize_DESC
  price_ASC
  price_DESC
}

type ListingPreviousValues {
  id: ID!
  address: String!
  description: String!
  rooms: Int!
  bath: Int!
  lotSize: Int!
  houseSize: Int!
  price: Int!
}

input ListingScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  address: String
  address_not: String
  address_in: [String!]
  address_not_in: [String!]
  address_lt: String
  address_lte: String
  address_gt: String
  address_gte: String
  address_contains: String
  address_not_contains: String
  address_starts_with: String
  address_not_starts_with: String
  address_ends_with: String
  address_not_ends_with: String
  description: String
  description_not: String
  description_in: [String!]
  description_not_in: [String!]
  description_lt: String
  description_lte: String
  description_gt: String
  description_gte: String
  description_contains: String
  description_not_contains: String
  description_starts_with: String
  description_not_starts_with: String
  description_ends_with: String
  description_not_ends_with: String
  rooms: Int
  rooms_not: Int
  rooms_in: [Int!]
  rooms_not_in: [Int!]
  rooms_lt: Int
  rooms_lte: Int
  rooms_gt: Int
  rooms_gte: Int
  bath: Int
  bath_not: Int
  bath_in: [Int!]
  bath_not_in: [Int!]
  bath_lt: Int
  bath_lte: Int
  bath_gt: Int
  bath_gte: Int
  lotSize: Int
  lotSize_not: Int
  lotSize_in: [Int!]
  lotSize_not_in: [Int!]
  lotSize_lt: Int
  lotSize_lte: Int
  lotSize_gt: Int
  lotSize_gte: Int
  houseSize: Int
  houseSize_not: Int
  houseSize_in: [Int!]
  houseSize_not_in: [Int!]
  houseSize_lt: Int
  houseSize_lte: Int
  houseSize_gt: Int
  houseSize_gte: Int
  price: Int
  price_not: Int
  price_in: [Int!]
  price_not_in: [Int!]
  price_lt: Int
  price_lte: Int
  price_gt: Int
  price_gte: Int
  AND: [ListingScalarWhereInput!]
  OR: [ListingScalarWhereInput!]
  NOT: [ListingScalarWhereInput!]
}

type ListingSubscriptionPayload {
  mutation: MutationType!
  node: Listing
  updatedFields: [String!]
  previousValues: ListingPreviousValues
}

input ListingSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: ListingWhereInput
  AND: [ListingSubscriptionWhereInput!]
  OR: [ListingSubscriptionWhereInput!]
  NOT: [ListingSubscriptionWhereInput!]
}

input ListingUpdateDataInput {
  address: String
  description: String
  rooms: Int
  bath: Int
  lotSize: Int
  houseSize: Int
  price: Int
  user: UserUpdateOneRequiredWithoutListingsInput
}

input ListingUpdateInput {
  address: String
  description: String
  rooms: Int
  bath: Int
  lotSize: Int
  houseSize: Int
  price: Int
  user: UserUpdateOneRequiredWithoutListingsInput
}

input ListingUpdateManyDataInput {
  address: String
  description: String
  rooms: Int
  bath: Int
  lotSize: Int
  houseSize: Int
  price: Int
}

input ListingUpdateManyMutationInput {
  address: String
  description: String
  rooms: Int
  bath: Int
  lotSize: Int
  houseSize: Int
  price: Int
}

input ListingUpdateManyWithoutUserInput {
  create: [ListingCreateWithoutUserInput!]
  delete: [ListingWhereUniqueInput!]
  connect: [ListingWhereUniqueInput!]
  set: [ListingWhereUniqueInput!]
  disconnect: [ListingWhereUniqueInput!]
  update: [ListingUpdateWithWhereUniqueWithoutUserInput!]
  upsert: [ListingUpsertWithWhereUniqueWithoutUserInput!]
  deleteMany: [ListingScalarWhereInput!]
  updateMany: [ListingUpdateManyWithWhereNestedInput!]
}

input ListingUpdateManyWithWhereNestedInput {
  where: ListingScalarWhereInput!
  data: ListingUpdateManyDataInput!
}

input ListingUpdateOneRequiredInput {
  create: ListingCreateInput
  update: ListingUpdateDataInput
  upsert: ListingUpsertNestedInput
  connect: ListingWhereUniqueInput
}

input ListingUpdateWithoutUserDataInput {
  address: String
  description: String
  rooms: Int
  bath: Int
  lotSize: Int
  houseSize: Int
  price: Int
}

input ListingUpdateWithWhereUniqueWithoutUserInput {
  where: ListingWhereUniqueInput!
  data: ListingUpdateWithoutUserDataInput!
}

input ListingUpsertNestedInput {
  update: ListingUpdateDataInput!
  create: ListingCreateInput!
}

input ListingUpsertWithWhereUniqueWithoutUserInput {
  where: ListingWhereUniqueInput!
  update: ListingUpdateWithoutUserDataInput!
  create: ListingCreateWithoutUserInput!
}

input ListingWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  address: String
  address_not: String
  address_in: [String!]
  address_not_in: [String!]
  address_lt: String
  address_lte: String
  address_gt: String
  address_gte: String
  address_contains: String
  address_not_contains: String
  address_starts_with: String
  address_not_starts_with: String
  address_ends_with: String
  address_not_ends_with: String
  description: String
  description_not: String
  description_in: [String!]
  description_not_in: [String!]
  description_lt: String
  description_lte: String
  description_gt: String
  description_gte: String
  description_contains: String
  description_not_contains: String
  description_starts_with: String
  description_not_starts_with: String
  description_ends_with: String
  description_not_ends_with: String
  rooms: Int
  rooms_not: Int
  rooms_in: [Int!]
  rooms_not_in: [Int!]
  rooms_lt: Int
  rooms_lte: Int
  rooms_gt: Int
  rooms_gte: Int
  bath: Int
  bath_not: Int
  bath_in: [Int!]
  bath_not_in: [Int!]
  bath_lt: Int
  bath_lte: Int
  bath_gt: Int
  bath_gte: Int
  lotSize: Int
  lotSize_not: Int
  lotSize_in: [Int!]
  lotSize_not_in: [Int!]
  lotSize_lt: Int
  lotSize_lte: Int
  lotSize_gt: Int
  lotSize_gte: Int
  houseSize: Int
  houseSize_not: Int
  houseSize_in: [Int!]
  houseSize_not_in: [Int!]
  houseSize_lt: Int
  houseSize_lte: Int
  houseSize_gt: Int
  houseSize_gte: Int
  price: Int
  price_not: Int
  price_in: [Int!]
  price_not_in: [Int!]
  price_lt: Int
  price_lte: Int
  price_gt: Int
  price_gte: Int
  user: UserWhereInput
  AND: [ListingWhereInput!]
  OR: [ListingWhereInput!]
  NOT: [ListingWhereInput!]
}

input ListingWhereUniqueInput {
  id: ID
}

scalar Long

type Mutation {
  createListing(data: ListingCreateInput!): Listing!
  updateListing(data: ListingUpdateInput!, where: ListingWhereUniqueInput!): Listing
  updateManyListings(data: ListingUpdateManyMutationInput!, where: ListingWhereInput): BatchPayload!
  upsertListing(where: ListingWhereUniqueInput!, create: ListingCreateInput!, update: ListingUpdateInput!): Listing!
  deleteListing(where: ListingWhereUniqueInput!): Listing
  deleteManyListings(where: ListingWhereInput): BatchPayload!
  createTemplate(data: TemplateCreateInput!): Template!
  updateTemplate(data: TemplateUpdateInput!, where: TemplateWhereUniqueInput!): Template
  upsertTemplate(where: TemplateWhereUniqueInput!, create: TemplateCreateInput!, update: TemplateUpdateInput!): Template!
  deleteTemplate(where: TemplateWhereUniqueInput!): Template
  deleteManyTemplates(where: TemplateWhereInput): BatchPayload!
  createUser(data: UserCreateInput!): User!
  updateUser(data: UserUpdateInput!, where: UserWhereUniqueInput!): User
  updateManyUsers(data: UserUpdateManyMutationInput!, where: UserWhereInput): BatchPayload!
  upsertUser(where: UserWhereUniqueInput!, create: UserCreateInput!, update: UserUpdateInput!): User!
  deleteUser(where: UserWhereUniqueInput!): User
  deleteManyUsers(where: UserWhereInput): BatchPayload!
}

enum MutationType {
  CREATED
  UPDATED
  DELETED
}

interface Node {
  id: ID!
}

type PageInfo {
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
  endCursor: String
}

enum Permission {
  ADMIN
  USER
  LISTINGCREATE
  LISTINGUPDATE
  LISTINGDELETE
  PERMISSIONUPDATE
}

type Query {
  listing(where: ListingWhereUniqueInput!): Listing
  listings(where: ListingWhereInput, orderBy: ListingOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Listing]!
  listingsConnection(where: ListingWhereInput, orderBy: ListingOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): ListingConnection!
  template(where: TemplateWhereUniqueInput!): Template
  templates(where: TemplateWhereInput, orderBy: TemplateOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Template]!
  templatesConnection(where: TemplateWhereInput, orderBy: TemplateOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): TemplateConnection!
  user(where: UserWhereUniqueInput!): User
  users(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [User]!
  usersConnection(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): UserConnection!
  node(id: ID!): Node
}

type Subscription {
  listing(where: ListingSubscriptionWhereInput): ListingSubscriptionPayload
  template(where: TemplateSubscriptionWhereInput): TemplateSubscriptionPayload
  user(where: UserSubscriptionWhereInput): UserSubscriptionPayload
}

type Template {
  id: ID!
  listing: Listing!
}

type TemplateConnection {
  pageInfo: PageInfo!
  edges: [TemplateEdge]!
  aggregate: AggregateTemplate!
}

input TemplateCreateInput {
  id: ID
  listing: ListingCreateOneInput!
}

type TemplateEdge {
  node: Template!
  cursor: String!
}

enum TemplateOrderByInput {
  id_ASC
  id_DESC
}

type TemplatePreviousValues {
  id: ID!
}

type TemplateSubscriptionPayload {
  mutation: MutationType!
  node: Template
  updatedFields: [String!]
  previousValues: TemplatePreviousValues
}

input TemplateSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: TemplateWhereInput
  AND: [TemplateSubscriptionWhereInput!]
  OR: [TemplateSubscriptionWhereInput!]
  NOT: [TemplateSubscriptionWhereInput!]
}

input TemplateUpdateInput {
  listing: ListingUpdateOneRequiredInput
}

input TemplateWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  listing: ListingWhereInput
  AND: [TemplateWhereInput!]
  OR: [TemplateWhereInput!]
  NOT: [TemplateWhereInput!]
}

input TemplateWhereUniqueInput {
  id: ID
}

type User {
  id: ID!
  name: String!
  email: String!
  password: String!
  listings(where: ListingWhereInput, orderBy: ListingOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Listing!]
  resetToken: String
  resetTokenExpiry: String
  permissions: [Permission!]!
}

type UserConnection {
  pageInfo: PageInfo!
  edges: [UserEdge]!
  aggregate: AggregateUser!
}

input UserCreateInput {
  id: ID
  name: String!
  email: String!
  password: String!
  listings: ListingCreateManyWithoutUserInput
  resetToken: String
  resetTokenExpiry: String
  permissions: UserCreatepermissionsInput
}

input UserCreateOneWithoutListingsInput {
  create: UserCreateWithoutListingsInput
  connect: UserWhereUniqueInput
}

input UserCreatepermissionsInput {
  set: [Permission!]
}

input UserCreateWithoutListingsInput {
  id: ID
  name: String!
  email: String!
  password: String!
  resetToken: String
  resetTokenExpiry: String
  permissions: UserCreatepermissionsInput
}

type UserEdge {
  node: User!
  cursor: String!
}

enum UserOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  email_ASC
  email_DESC
  password_ASC
  password_DESC
  resetToken_ASC
  resetToken_DESC
  resetTokenExpiry_ASC
  resetTokenExpiry_DESC
}

type UserPreviousValues {
  id: ID!
  name: String!
  email: String!
  password: String!
  resetToken: String
  resetTokenExpiry: String
  permissions: [Permission!]!
}

type UserSubscriptionPayload {
  mutation: MutationType!
  node: User
  updatedFields: [String!]
  previousValues: UserPreviousValues
}

input UserSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: UserWhereInput
  AND: [UserSubscriptionWhereInput!]
  OR: [UserSubscriptionWhereInput!]
  NOT: [UserSubscriptionWhereInput!]
}

input UserUpdateInput {
  name: String
  email: String
  password: String
  listings: ListingUpdateManyWithoutUserInput
  resetToken: String
  resetTokenExpiry: String
  permissions: UserUpdatepermissionsInput
}

input UserUpdateManyMutationInput {
  name: String
  email: String
  password: String
  resetToken: String
  resetTokenExpiry: String
  permissions: UserUpdatepermissionsInput
}

input UserUpdateOneRequiredWithoutListingsInput {
  create: UserCreateWithoutListingsInput
  update: UserUpdateWithoutListingsDataInput
  upsert: UserUpsertWithoutListingsInput
  connect: UserWhereUniqueInput
}

input UserUpdatepermissionsInput {
  set: [Permission!]
}

input UserUpdateWithoutListingsDataInput {
  name: String
  email: String
  password: String
  resetToken: String
  resetTokenExpiry: String
  permissions: UserUpdatepermissionsInput
}

input UserUpsertWithoutListingsInput {
  update: UserUpdateWithoutListingsDataInput!
  create: UserCreateWithoutListingsInput!
}

input UserWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  email: String
  email_not: String
  email_in: [String!]
  email_not_in: [String!]
  email_lt: String
  email_lte: String
  email_gt: String
  email_gte: String
  email_contains: String
  email_not_contains: String
  email_starts_with: String
  email_not_starts_with: String
  email_ends_with: String
  email_not_ends_with: String
  password: String
  password_not: String
  password_in: [String!]
  password_not_in: [String!]
  password_lt: String
  password_lte: String
  password_gt: String
  password_gte: String
  password_contains: String
  password_not_contains: String
  password_starts_with: String
  password_not_starts_with: String
  password_ends_with: String
  password_not_ends_with: String
  listings_every: ListingWhereInput
  listings_some: ListingWhereInput
  listings_none: ListingWhereInput
  resetToken: String
  resetToken_not: String
  resetToken_in: [String!]
  resetToken_not_in: [String!]
  resetToken_lt: String
  resetToken_lte: String
  resetToken_gt: String
  resetToken_gte: String
  resetToken_contains: String
  resetToken_not_contains: String
  resetToken_starts_with: String
  resetToken_not_starts_with: String
  resetToken_ends_with: String
  resetToken_not_ends_with: String
  resetTokenExpiry: String
  resetTokenExpiry_not: String
  resetTokenExpiry_in: [String!]
  resetTokenExpiry_not_in: [String!]
  resetTokenExpiry_lt: String
  resetTokenExpiry_lte: String
  resetTokenExpiry_gt: String
  resetTokenExpiry_gte: String
  resetTokenExpiry_contains: String
  resetTokenExpiry_not_contains: String
  resetTokenExpiry_starts_with: String
  resetTokenExpiry_not_starts_with: String
  resetTokenExpiry_ends_with: String
  resetTokenExpiry_not_ends_with: String
  AND: [UserWhereInput!]
  OR: [UserWhereInput!]
  NOT: [UserWhereInput!]
}

input UserWhereUniqueInput {
  id: ID
  email: String
}
`